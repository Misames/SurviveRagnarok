import sys
import os
import io
import warnings
from PIL import Image, ImageDraw, ImageFont
from stability_sdk import client
import stability_sdk.interfaces.gooseai.generation.generation_pb2 as generation

# Configuration des variables d'environnement
os.environ['STABILITY_HOST'] = 'grpc.stability.ai:443'
os.environ['STABILITY_KEY'] = 'sk-5DOE7WxJFwksLlKMzME9fQ5uvpx5YIKuK6SzOOKJKBMeDSkC'

# Connexion à l'API
stability_api = client.StabilityInference(
    key=os.environ['STABILITY_KEY'],
    verbose=True,
    engine="stable-diffusion-xl-1024-v1-0"
)

# Fonction pour générer et sauvegarder l'image
def generate_and_save_image(prompt_text, init_image=None):

    openedImage = None

    if init_image is not None:
        openedImage = Image.open(init_image)

    answers = stability_api.generate(
        prompt=prompt_text,
        init_image=openedImage,
        start_schedule=0.6,
        seed=0 if not init_image else 0,
        steps=30,
        cfg_scale=8.0 if not init_image else 9.0,
        width=1024,
        height=1024,
        sampler=generation.SAMPLER_K_DPMPP_2M
    )

    for resp in answers:
        for artifact in resp.artifacts:
            if artifact.finish_reason == generation.FILTER:
                warnings.warn("Your request activated the API's safety filters and could not be processed.")
            elif artifact.type == generation.ARTIFACT_IMAGE:
                img_result = Image.open(io.BytesIO(artifact.binary))

                # Générer un nom de fichier basé sur le prompt
                filename = prompt_text[:50].replace(" ", "_") + ".png"
                img_result.save("Assets/GeneratedImages/" + filename, "PNG")

                return filename
